version: "3.7"

services:
  db:
    image: mysql
    platform: linux/amd64
    container_name: mysql-con
    env_file:
      - ./.env
    ports:
      - 3306:3306
    volumes:
      - data_mysql:/mysql
    networks:
      - app-tier
    # 명령어 실행 끝나도 안꺼짐
    tty: true

  backend:
    links:
      - db
    container_name: backend-con
    build:
      context: ./backend
    expose:
      - 8000
    volumes:
      - ./backend:/backend/
    # restart: always 배포때만
    env_file:
      - ./.env
    depends_on:
      - db
    # command: 
    networks:
      - app-tier
    # 명령어 실행 끝나도 안꺼짐
    tty: true
  
  frontend-web:
    container_name: frontend-web-con
    build: ./frontend-web
    command: ["serve", "-s", "build", "-l", "3001"]

    networks:
      - app-tier
    volumes:
      - ./frontend-web/:/frontend-web
      - build_folder:/frontend-web/build
      - ./frontend-web/node_modules/:/frontend-web/node_modules
    # 명령어 실행 끝나도 안꺼짐
    tty: true

  nginx:
    container_name: nginx-con
    build: ./nginx
    ports:
      - 80:80
      - 443:443
      - 8081:8081
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - app-tier
    restart: always
    # 명령어 실행 끝나도 안꺼짐
    tty: true
  
  certbot:
    container_name: certbot-con
    image: certbot/certbot:latest
    command: certonly --webroot --webroot-path=/var/www/certbot --email deca3248@gmail.com --agree-tos --no-eff-email -d letstikitaka.com
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

  prometheus:
    image: prom/prometheus #docker Hub에서 가져와서 사용
    container_name: prometheus #컨테이너 이름 설정
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./prometheus/volume:/prometheus
    ports:
      - 9090:9090 #외부:내부포트
    command: # 컨테이너 실행 완료 후 컨테이너의 쉘에서 실행시킬 쉘명령어를 지정할 수 있다.
      - '--web.enable-lifecycle' #구성된 규칙 파일 다시 로드
      - '--config.file=/etc/prometheus/prometheus.yml' #로드할 구성 파일 지정
    # restart: always #컨테이너가 다운될 경우 항상 재실행
    networks:
      - app-tier #컨테이너간의 네트워크 분리를 위해 설정
    depends_on:
      - node-exporter

  # node-exporter:
  #   image: nginx/nginx-prometheus-exporter
  #   container_name: node-exporter
  #   ports:
  #     - "9113:9113"
  #   command:
  #     - -nginx.scrape-uri=http://nginx:8081/metrics
  #     - -web.telemetry-path=/prometheus
  #   networks:
  #     - app-tier
  #   depends_on:
  #     - nginx
  #   restart: always
  node-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: node-exporter
    ports:
      - "9113:9113"
    command:
      - -nginx.scrape-uri
      - http://nginx-con/metrics
    depends_on:
      - nginx
    networks:
      - app-tier
    restart: always
    
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

networks:
  app-tier:
    external: true
  
volumes:
  data_mysql:
  build_folder: